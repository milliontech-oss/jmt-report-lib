apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'project-report' // use `gradlew htmlDependencyReport` to view the graphs
apply plugin: 'maven-publish'

group = 'com.milliontech'
version = '5.1.2'
sourceCompatibility = 1.8

println "Gradle Version: ${project.getGradle().getGradleVersion().toString()}"

repositories {
    //mavenCentral()
    maven {
        url 'https://int.milliontech.com/mtnexus/repository/maven-public/'
    }
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishing {
    repositories {
        mavenLocal()
        maven {
            name 'MT'
            def releasesRepoUrl = 'https://int.milliontech.com/mtnexus/repository/MT/'
            def snapshotsRepoUrl = 'https://int.milliontech.com/mtnexus/repository/maven-snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jmt-report-lib'
            artifact tasks.sourceJar
            from components.java
        }
    }
}

def apachePOIVersion = '5.2.2'
def slf4jVersion = '1.7.36'
def iTextVersion = '7.2.1'

java {
    registerFeature("csvSupport") {
        usingSourceSet(sourceSets.main)
    }
}

dependencies {
    modules {
        module("commons-logging:commons-logging") {
            replacedBy("org.slf4j:jcl-over-slf4j")
        }
    }

    // slf4j
    api("org.slf4j:slf4j-api:${slf4jVersion}");

    //POI
    api("org.apache.poi:poi:${apachePOIVersion}")
    api("org.apache.poi:poi-ooxml:${apachePOIVersion}")
    api("org.apache.poi:poi-ooxml-lite:${apachePOIVersion}")

    //iText
	api("com.itextpdf:itext7-core:${iTextVersion}")

    csvSupportApi('net.sf.supercsv:super-csv:2.4.0')

    api('org.jodd:jodd-util:6.1.0')
    api('org.apache.commons:commons-lang3:3.12.0')
    api('org.apache.commons:commons-collections4:4.4')
    api('commons-io:commons-io:2.11.0')

    // Use JUnit test framework
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
    testImplementation(platform('org.apache.logging.log4j:log4j-bom:2.17.2'))
    testImplementation('org.apache.logging.log4j:log4j-slf4j-impl')
    testImplementation('org.apache.logging.log4j:log4j-core')
}


def listrepos = {
    println "~~~~ listing repositories ~~~~"
    project.repositories.each { println "  Name: ${it.name} =>  url: ${it.url}" }
    println "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
listrepos()

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs.addAll([
             "-Xlint:all",
             "-Xlint:-serial",
             "-Xlint:-unchecked",
             "-Xlint:-rawtypes",
             "-Xlint:-cast",
             "-parameters"
        ])
        doFirst {
            println "current JVM = ${System.properties['java.vendor']} (${System.properties['java.version']}) (${System.properties['java.home']})"
            println "javac compiler flags => $options.allCompilerArgs"
        }
    }
}

test {
    dependsOn 'cleanTest'

    useJUnitPlatform()
    minHeapSize = "256m"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}
